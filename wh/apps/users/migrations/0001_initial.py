# Generated by Django 4.2.16 on 2024-12-07 15:19

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('system', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClientStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=70, verbose_name='Nombre')),
                ('class_css', models.CharField(max_length=40, verbose_name='Class ccs color')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
            ],
            options={
                'verbose_name': 'Estado Clientes',
                'verbose_name_plural': 'Estado Clientes',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='TipoPersona',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='Nombre')),
            ],
        ),
        migrations.CreateModel(
            name='TipoUsuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='Nombre')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('address', models.TextField(blank=True, verbose_name='Dirección')),
                ('phone_number', models.CharField(blank=True, max_length=250, validators=[django.core.validators.RegexValidator(message='Ingrese solo números.', regex='^\\d+$')], verbose_name='Teléfono Celular')),
                ('rfc', models.CharField(blank=True, max_length=30, verbose_name='RFC/RUC/NIT')),
                ('legal_name', models.CharField(blank=True, max_length=255, verbose_name='Nombre facturación')),
                ('tax_id', models.CharField(blank=True, max_length=30, verbose_name='RFC/RUC')),
                ('tax_system', models.CharField(blank=True, max_length=10, null=True, verbose_name='Regimen fiscal')),
                ('postal_code', models.CharField(blank=True, max_length=50, verbose_name='Código postal')),
                ('billing_address', models.TextField(blank=True, max_length=100, verbose_name='Dirección de facturación')),
                ('billing_email', models.EmailField(blank=True, max_length=254, verbose_name='Email de facturación')),
                ('district', models.CharField(blank=True, max_length=50, verbose_name='Localidad/Barrio/Departamento')),
                ('city', models.CharField(blank=True, max_length=50, verbose_name='Ciudad/Municipio')),
                ('license', models.CharField(blank=True, max_length=35, verbose_name='Licencia DNI/C.I./C.C.')),
                ('company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='company_user', to='system.empresa', verbose_name='Empresa')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('person_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='person_type_user', to='users.tipopersona', verbose_name='Tipo de persona')),
                ('status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='client_status', to='users.clientstatus', verbose_name='Estatus')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('user_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_type_user', to='users.tipousuario', verbose_name='Tipo de usuario')),
            ],
            options={
                'ordering': ('-id',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
